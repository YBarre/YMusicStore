// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MusicStoreClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Samples.
    /// </summary>
    public static partial class SamplesExtensions
    {
            /// <summary>
            /// Get a list of all samples
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Sample> Get(this ISamples operations)
            {
                return Task.Factory.StartNew(s => ((ISamples)s).GetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all samples
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Sample>> GetAsync(this ISamples operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new Sample entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sample'>
            /// </param>
            public static Sample PostSample(this ISamples operations, Sample sample)
            {
                return Task.Factory.StartNew(s => ((ISamples)s).PostSampleAsync(sample), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new Sample entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sample'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Sample> PostSampleAsync(this ISamples operations, Sample sample, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSampleWithHttpMessagesAsync(sample, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes all blobs associated with an entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sampleEntity'>
            /// </param>
            public static void DeleteBlobs(this ISamples operations, SampleEntity sampleEntity)
            {
                Task.Factory.StartNew(s => ((ISamples)s).DeleteBlobsAsync(sampleEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes all blobs associated with an entity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sampleEntity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBlobsAsync(this ISamples operations, SampleEntity sampleEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteBlobsWithHttpMessagesAsync(sampleEntity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns a specfic sample by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Sample GetSample(this ISamples operations, string id)
            {
                return Task.Factory.StartNew(s => ((ISamples)s).GetSampleAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a specfic sample by ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Sample> GetSampleAsync(this ISamples operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSampleWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a SampleEntity from PUT operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='sample'>
            /// </param>
            public static void PutSample(this ISamples operations, string id, Sample sample)
            {
                Task.Factory.StartNew(s => ((ISamples)s).PutSampleAsync(id, sample), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a SampleEntity from PUT operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='sample'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutSampleAsync(this ISamples operations, string id, Sample sample, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutSampleWithHttpMessagesAsync(id, sample, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes SampleEntity from table and all associated blobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteSample(this ISamples operations, string id)
            {
                Task.Factory.StartNew(s => ((ISamples)s).DeleteSampleAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes SampleEntity from table and all associated blobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSampleAsync(this ISamples operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSampleWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
